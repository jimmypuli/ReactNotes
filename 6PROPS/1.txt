const App = () => {
  const stories = [
    {
      title: 'React',
      url: 'https://reactjs.org/',
      author: 'Jordan Walke',
      num_comments: 3,
      points: 4,
      objectID: 0,
    }, 
    {
      title: 'Redux',
      url: 'https://redux.js.org/',
      author: 'Dan Abramov, Andrew Clark',
      num_comments: 2,
      points: 5,
      objectID: 1,
    },
  ];



  return(  
    <div>
      <h1>My Hacker Stories</h1> 

      <Search />

      <hr /> 
      
      <List list = {stories}/> 
      ^ here we instantiate the List component
      and pass in the list of items to the List component. The variable 
      is called stories in the App component and we pass it with the same
      name. However, it is assigned to the 'list' component attribute. 
      Attribute name can change as long as naming is consistent throughout 
      code(check 1.1). 

    </div>
  );
};

1.1 stories is contained in props but props can hold a lot more information 
so we need to use 'props.list' which is the name of the html attribute 
that was originally used to pass the list to the List component. This is used 
to access stories. 
const List = (props) => (
    <ul> 
        {props.list.map((item) => (
            <li key = {item.objectID}>
            ....//doesn't display anything 'item.author' could work?
            </li> 
        ))}
    </ul> 
); 

Now we want to extract another component from List called Item. Thus, the 
following changes to List need to be made. 

const List = (props) => (
    <ul>
        {props.list.map((item) => (
            <Item key = {item.objectID} item = {item} /> 
        ))}
    </ul> 
)

const Item = (props) => (
    <li> 
        <span>
            <a href = {props.item.url}> {props.item.title} </a>
        </span>
        <span>{props.item.author} </span>
        <span>{props.item.num_comments} </span>
        <span>{props.item.points} </span>
    </li> //this is one bullet point for each item 
)



